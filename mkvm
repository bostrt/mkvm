#!/bin/bash

OPTSTRING=":b:n:o:i:h:s"
SSH_CERT=$HOME/.ssh/id_rsa.pub
IMAGE_DIR=$HOME/images
RED=$(tput setaf 1)
BOLD=$(tput bold)
NORM=$(tput sgr0)
VMNAME=
OSVERSION=
IPADDR=
ARG_ERR=0
AUTO_START=false

# Print help.
function mkvm_help() {
    echo "mkvm -n name -i ip_addr -o os_version [-ssh public_key] [-s]"
}

# Print error message.
function error() {
    echo -e "$RED$*$NORM"
}

# Print fatal error message.
function fatal() {
    echo -e "$RED$BOLD$*$NORM"
}

# Parse arguments
while getopts $OPTSTRING opt; do
    case $opt in
	n)        
	    VMNAME="$OPTARG"
	    ;;
	o)
	    OSVERSION="$OPTARG"
	    ;;
	i)
	    IPADDR="$OPTARG"
	    ;;
        ssh)
            SSH_CERT="$OPTARG"
            ;;
    s)
        AUTO_START=true
        ;;
	h)
	    mkvm_help
	    exit 0
	    ;;
	:)
	    error "Missing options for -$OPTARG"
	    ;;
	*) 
	    echo "Invalid options: -$OPTARG"
	    ;;
	    
    esac
done

# Validate arguments.
if [[ "$VMNAME" == "" ]]; then
    error "VM Name (-n) is required."
    ARG_ERR=1
fi

if [[ "$OSVERSION" == "" ]]; then
    error "OS Version (-o) is required."
    ARG_ERR=1
fi

if [[ "$SSH_CERT" == "" ]]; then
    error "SSH public key (-ssh) required."
    ARG_ERR=1
fi

if [[ $ARG_ERR -ne 0 ]]; then
    fatal "Exiting due to errors."
    exit 1
fi

# Create some temp folders to store customized configs.
TMP_ifcfgeth0=$(mktemp)
TMP_network=$(mktemp)
MKVM_DIR=$(dirname $(readlink -f $0))

# Ensure images dir has been created
mkdir $IMAGE_DIR &> /dev/null

if [ -z $IPADDR ]; then
    echo "The IP address was not provided. Using next IP in gateway range."
    # Grab latest IP address in the correct range (derived from the network gateway in use)
    ipRange=$(grep -i gateway $MKVM_DIR/mkvm.network | cut -d= -f2 | rev | sed -r 's/^[0-9]+\././' | rev)
    # grab the highest IP for the static network
    LAST_HOST=$(egrep -o "$ipRange[0-9]+" /etc/hosts | rev | cut -f1 -d. | rev | sort -n | tail -n1)
    # put together gateway range and last host entry to create new ip
    IPADDR=$ipRange$((LAST_HOST+1))
fi

# Set static IP in ifcfg-eth0 file for guest.
sed "s/\$IPADDR/$IPADDR/" $MKVM_DIR/mkvm.ifcfg-eth0 > $TMP_ifcfgeth0
# Set hostname in network file for guest.
sed "s/\$HOSTNAME/$VMNAME/" $MKVM_DIR/mkvm.network > $TMP_network

# tar up plugins to be sent to the server.
tar -czf $MKVM_DIR/plugins.tar.gz -C $MKVM_DIR plugins/ &> /dev/null

# Download and build the VM.
# --install lsof,emacs-nox,unzip,vim \ # default packages...Fedora doesn't like these because of key problems?
virt-builder \
--hostname $VMNAME \
--root-password password:rhel_root_password \
--upload $SSH_CERT:/root/remote_id_rsa.pub \
--upload $MKVM_DIR/plugins.tar.gz:/root/plugins.tar.gz \
--firstboot $MKVM_DIR/mkvm.firstboot.sh \
--upload $TMP_ifcfgeth0:/etc/sysconfig/network-scripts/ifcfg-eth0 \
--upload $TMP_network:/etc/sysconfig/network \
--upload $MKVM_DIR/mkvm.resolv.conf:/etc/resolv.conf \
--output $IMAGE_DIR/$VMNAME-$OSVERSION.img \
$OSVERSION

# Clean up temp files.
rm $TMP_ifcfgeth0 $TMP_network $MKVM_DIR/plugins.tar.gz

if [[ $? -ne 0 ]]; then
    fatal "Error creating new image"
    exit 1
fi

# Install the new image in libvirt
virt-install \
--connect=qemu:///system \
--name $VMNAME \
--cpu host-model-only \
--vcpus 1 \
--ram 2048 \
--network=network:default_static,model=virtio \
--os-type=linux \
--disk path=$IMAGE_DIR/$VMNAME-$OSVERSION.img \
--graphics=spice \
--import \
--noautoconsole \
--noreboot

if [[ $? -ne 0 ]]; then
    fatal "Error installing virtual machine."
    exit 1
fi

echo
# Update hypervisor's host file with new guest's IP and hostname.
echo "Appending to /etc/hosts:"
echo "$IPADDR $VMNAME" | sudo tee -a /etc/hosts

if [[ $? -ne 0 ]]; then
    fatal "Error adding new VM IP address to hypervisor hosts file."
    error "Virtual machine was installed successfully."
    exit 1
fi

# Adding auto-start option
if [ $AUTO_START = true ]; then
    echo
    echo "Auto-starting ${VMNAME}..."
    virsh --connect qemu:///system start $VMNAME
fi
